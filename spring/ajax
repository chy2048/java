前端需要提交复杂对象到后端Controller层的时候，可以这样操作

//客户端js代码
//可能会跨域，打开浏览器的控制台显示报错 access-control-allow-origin header is present on the requested resource
//跨域解决方法写在最后
var obj = {
   复杂的json对象
};
$.ajax({
    url: "http://ip:port/url",        //http协议头不加可能会报错
    data: JSON.stringify(obj),
    contentType: "application/json;charset=utf-8",
    type: "POST",
    dataType: "json",
    success: function (data) {
        console.log(data);
    },
    error: function (error) {
        console.log(error);
    }
});


//服务端代码
@RequestMapping(value = "/mylocation", method = {RequestMethod.POST,RequestMethod.GET})
public void doSomeThing(@RequestBody Object obj){
    try{
        //todo  这里的Object可以换成任意对象
    }catch (Exception e){
        //todo
    }
}


//跨域解决方法
/**
 * 用FastJson 替换jackjson 作为springboot默认的json包
 */
@Configuration
public class WebAppConfigurer extends WebMvcConfigurerAdapter {

    //这段代码是把spring boot默认的jackjson包换成fastjson
    @Override
    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
        super.configureMessageConverters(converters);
        FastJsonHttpMessageConverter fast = new FastJsonHttpMessageConverter();
        FastJsonConfig fastJsonConfig = new FastJsonConfig();
        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);
        fast.setFastJsonConfig(fastJsonConfig);
        converters.add(fast);
    }

    //解决跨域问题
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**").allowedOrigins("*").allowCredentials(true)
                .allowedMethods("GET","POST")
                .maxAge(3600);
    }
}

